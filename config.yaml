# Description: ESPHome configuration for the ESP32-Dikale-Dryer Custom PCB
# https://github.com/SiloCityLabs/esp32-dikale-dryer


# These substitutions allow the end user to override certain values
substitutions:
  name: "esp32-dikale-dryer"
  friendly_name: "Filament Dryer"

  # If you deactivate this it also deactivates the improv_serial option. See here for more info: https://esphome.io/components/improv_serial
  log_level: "INFO"    

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: silocitylabs.esp32-dikale-dryer
    version: "1.0.1"

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  level: "${log_level}"

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:
  id: dikale_ota
  platform: esphome

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://SiloCityLabs/esp32-dikale-dryer/config.yaml@main
  import_full_config: true

wifi:
  ap:

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# Sets up the improv via serial client for Wi-Fi provisioning
improv_serial:

i2c:
  id: dikale_i2c
  sda: GPIO6
  scl: GPIO7
  scan: True
  frequency: 400kHz #Default is too slow for display

globals:
  # Used to select between settings in custom mode
  - id: target_selector
    type: int
    restore_value: no
    initial_value: '0'  # [ 0: none, 1: target_temp, 2: target_time, 3: target_humidity ]

  - id: blink_state
    type: bool
    restore_value: no
    initial_value: 'true'

number:
  - platform: template
    name: "Temp Range Tolerance"
    id: temp_tolerance
    min_value: 0.0
    max_value: 2.0
    initial_value: 0.5
    step: 0.5
    restore_value: True
    optimistic: True

  - platform: template
    name: "Temp Humidity Tolerance"
    id: humidity_tolerance
    min_value: 0.0
    max_value: 2.0
    initial_value: 0.5
    step: 0.5
    restore_value: True
    optimistic: True

  - platform: template
    name: "Target Temperature"
    id: target_temp
    min_value: 0.0
    max_value: 80.0
    step: 0.5
    restore_value: True
    optimistic: True

  - platform: template
    name: "Target Time"
    id: target_time
    min_value: 0
    max_value: 2880
    step: 1
    restore_value: True
    optimistic: True

  - platform: template
    name: "Target Humidity"
    id: target_humidity
    min_value: 15.0
    max_value: 100.0
    step: 1
    restore_value: True
    optimistic: True

# Breakdown of Limits:
#     ABS Softening Point: ~105°C, but it can warp as low as 80°C.
#     AMS1117 Regulator: Max 125°C, but efficiency drops with temp.
#     60/40 Solder: Melts at 183°C, but joints degrade above 100°C.
#     Ceramic Capacitors: Typically rated 125°C, safe below 85°C.
#     SSD1306 Display: Usually 70°C max before contrast issues.
#     Relay: Typically 85°C–105°C, depends on the model.
#     PCB Components: General safe limit is 80°C for longevity.

# Safe Operating Temp:
#     Recommended Max: 60°C–65°C
#     Absolute Max Before Risk: 80°C
#     Ideal for Filament Drying: 45°C–55°C (works well for PLA, PETG, and even ABS drying).
select:
  - platform: template
    name: "Dryer Mode"
    id: dryer_mode_select
    options: ["Idle", "PLA", "PETG", "ABS", "Custom"]
    restore_value: no
    initial_option: "Idle"
    set_action:
      - script.execute: handle_mode_change

sensor:
  - platform: aht10
    variant: AHT20
    temperature:
      id: temp_sensor
      name: "Temperature"
    humidity:
      id: humidity_sensor
      name: "Humidity"
    address: 0x38
    update_interval: 5s

display:
  - platform: ssd1306_i2c
    id: display_1306
    model: "SSD1306 128x32"
    address: 0x3C
    update_interval: never  # Prevent automatic updates, we'll control it manually
    lambda: |-
      float hours_left = id(target_time).state / 60.0;
      it.printf(0, 0, id(myfont), "T %.1f°C, H %.1f%%", id(temp_sensor).state, id(humidity_sensor).state);
      if (id(target_selector) == 0) {
        it.printf(0, 16, id(myfont), "%s, %.1f hrs", id(dryer_mode_select).state.c_str(), hours_left);
      } else if (id(blink_state)) {
        if (id(target_selector) == 1) it.printf(0, 16, id(myfont), "Temp: %.1f °C", id(target_temp).state);
        else if (id(target_selector) == 2) it.printf(0, 16, id(myfont), "Time: %.1f hrs", hours_left);
        else if (id(target_selector) == 3) it.printf(0, 16, id(myfont), "Humidity: %.1f %%", id(target_humidity).state);
      }

binary_sensor:
  - platform: gpio
    pin: GPIO9
    name: "Power Button"
    on_press:
      then:
        - lambda: |-
            std::string current_mode = id(dryer_mode_select).state;
            std::string next_mode;

            if (current_mode == "Idle") next_mode = "PLA";
            else if (current_mode == "PLA") next_mode = "PETG";
            else if (current_mode == "PETG") next_mode = "ABS";
            else if (current_mode == "ABS") next_mode = "Custom";
            else next_mode = "Idle";  // Loops back to Idle

            id(dryer_mode_select).publish_state(next_mode);
        - script.execute: handle_mode_change

  - platform: gpio
    pin: GPIO10
    name: "Mode Button"
    on_press:
      then:
        - lambda: |-
            // Ensure we are in "Custom" mode when adjusting settings
            id(dryer_mode_select).publish_state("Custom");

            // Move to the next setting mode in sequence
            if (id(target_selector) == 0) {
                id(target_selector) = 1;  // Switch to adjusting Temperature
            } else if (id(target_selector) == 1) {
                id(target_selector) = 2;  // Switch to adjusting Time
            } else if (id(target_selector) == 2) {
                id(target_selector) = 3;  // Switch to adjusting Humidity
            } else {
                id(target_selector) = 1;  // Return to Temp
            }
        - script.execute: handle_mode_change
  - platform: gpio
    pin: GPIO20
    name: "Up Button"
    on_press:
      then:
        - lambda: |-
            id(dryer_mode_select).publish_state("Custom");

            if (id(target_selector) == 1) { id(target_temp).state += 1.0; }

            if (id(target_selector) == 0 || id(target_selector) == 2) {
              id(target_selector) = 2; //Switch to this mode, from 0
              id(target_time).state += 60; //Add 1 hour
            }

            if (id(target_selector) == 3) { id(target_humidity).state += 1.0; }
        - script.execute: handle_mode_change

  - platform: gpio
    pin: GPIO8
    name: "Down Button"
    on_press:
      then:
        - lambda: |-
            id(dryer_mode_select).publish_state("Custom");

            if (id(target_selector) == 1) { id(target_temp).state -= 1.0; }

            if (id(target_selector) == 0 || id(target_selector) == 2) {
              id(target_selector) = 2; //Switch to this mode, from 0
              id(target_time).state -= 60; //Subtract 1 hour
            }

            if (id(target_selector) == 3) { id(target_humidity).state -= 1.0; }
        - script.execute: handle_mode_change

switch:
  - platform: gpio
    name: "Heating Element"
    id: heater_switch
    restore_mode: ALWAYS_OFF
    pin: GPIO5

  - platform: gpio
    name: "DC Fan"
    id: fan_switch
    restore_mode: ALWAYS_OFF
    pin: GPIO2

font:
  - file: "gfonts://Roboto"
    id: myfont
    size: 16

script:
  - id: handle_mode_change
    mode: single
    then:
      - lambda: |-
          auto mode = id(dryer_mode_select).state;
          if (mode == "Idle") {
            id(heater_switch).turn_off();
            id(fan_switch).turn_off();
            id(target_temp).state = 0.0;
            id(target_humidity).state = 0.0;
            id(target_time).state = 0;
            id(target_selector) = 0;
          }
          else if (mode == "ABS") {
            id(target_temp).state = 65.0;
            id(target_humidity).state = 20.0;
            id(target_time).state = 240;
            id(target_selector) = 0;
          }
          else if (mode == "PETG") {
            id(target_temp).state = 60.0;
            id(target_humidity).state = 20.0;
            id(target_time).state = 240;
            id(target_selector) = 0;
          }
          else if (mode == "PLA") {
            id(target_temp).state = 50.0;
            id(target_humidity).state = 20.0;
            id(target_time).state = 240;
            id(target_selector) = 0;
          }

interval:
  # This section keeps track of the runtime of the dryer
  - interval: 60s
    then:
      - if:
          condition:
            lambda: 'return id(target_time).state > 0;'
          then:
            - lambda: 'id(target_time).state -= 1;'
      - lambda: 'id(target_selector) = 0;' # Return to display mode

  # Manages heat and fan
  - interval: 2s
    then:
      - if:
          condition:
            lambda: 'return id(dryer_mode_select).state != "Idle" && id(target_time).state > 0;'
          then:
            - if:
                condition:
                  lambda: 'return id(temp_sensor).state < id(target_temp).state - id(temp_tolerance).state;'
                then:
                  - switch.turn_on: heater_switch
                  - switch.turn_on: fan_switch
            - if:
                condition:
                  lambda: 'return id(temp_sensor).state > id(target_temp).state + id(temp_tolerance).state;'
                then:
                  - switch.turn_off: heater_switch
                  - switch.turn_off: fan_switch

            # Humidity maintenance mode
            # - if:
            #     condition:
            #       lambda: 'return id(humidity_sensor).state > id(target_humidity).state + id(humidity_tolerance).state;'
            #     then:
            #       - switch.turn_off: heater_switch
            #       - switch.turn_off: fan_switch
            # - if:
            #     condition:
            #       lambda: 'return id(humidity_sensor).state < id(target_humidity).state - id(humidity_tolerance).state;'
            #     then:
            #       - switch.turn_on: heater_switch
            #       - switch.turn_on: fan_switch
          else:
            - switch.turn_off: heater_switch
            - switch.turn_off: fan_switch

  # Blink state for options selector
  - interval: 500ms
    then:
      - lambda: 'id(blink_state) = !id(blink_state);'

  - interval: 5s
    then:
      - lambda: |-
          ESP_LOGI("DEBUG", "Target Selector: %d | Temp: %.1f°C | Time: %.1f hrs | Humidity: %.1f%% | Blink: %s",
            id(target_selector),
            id(target_temp).state,
            id(target_time).state / 60.0,
            id(target_humidity).state,
            id(blink_state) ? "ON" : "OFF"
          );

  # Normal display update interval when in default mode (every 2 seconds)
  - interval: 2s
    then:
      - if:
          condition:
            lambda: 'return id(target_selector) == 0;'
          then:
            - component.update: display_1306  # Refresh screen

  # Faster display update interval when adjusting settings (for blinking effect, every 500ms)
  - interval: 500ms
    then:
      - if:
          condition:
            lambda: 'return id(target_selector) != 0;'
          then:
            - component.update: display_1306  # Refresh screen
