# Description: ESPHome configuration for the ESP32-Dikale-Dryer Custom PCB
# https://github.com/SiloCityLabs/esp32-dikale-dryer


# These substitutions allow the end user to override certain values
substitutions:
  name: "esp32-dikale-dryer"
  friendly_name: "Filament Dryer"

  # If you deactivate this it also deactivates the improv_serial option. See here for more info: https://esphome.io/components/improv_serial
  log_level: "INFO"    

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: silocitylabs.esp32-dikale-dryer
    version: "0.1.1"

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

# Enable logging
logger:
  level: "${log_level}"

# API is a requirement of the dashboard import.
api:

# OTA is required for Over-the-Air updating
ota:
  platform: esphome

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://SiloCityLabs/esp32-dikale-dryer/config.yaml@main
  import_full_config: true

wifi:
  ap:

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device.
captive_portal:

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# Sets up the improv via serial client for Wi-Fi provisioning
improv_serial:

i2c:
  sda: GPIO6
  scl: GPIO7
  scan: True
  frequency: 400kHz

globals:
  - id: dryer_mode
    type: int
    restore_value: no
    initial_value: '0'  # Default to off

  # This is 1 for target_selector
  - id: target_time
    type: int
    restore_value: yes
    initial_value: '0'  # Default drying time in minutes

  # This is 2 for target_selector
  - id: target_temp
    type: float
    restore_value: yes
    initial_value: '0.0'  # Default to off

  # This is 3 for target_selector
  - id: target_humidity
    type: float
    restore_value: yes
    initial_value: '20.0' # Default to off

  # Used to select between settings temp, humidity, and time in custom mode
  # 0 = no selection to be made, normal display but in custom
  - id: target_selector
    type: int
    restore_value: no
    initial_value: '0'  # Default to off

  - id: blink_state
    type: bool
    restore_value: no
    initial_value: 'true'

# Breakdown of Limits:
#     ABS Softening Point: ~105°C, but it can warp as low as 80°C.
#     AMS1117 Regulator: Max 125°C, but efficiency drops with temp.
#     60/40 Solder: Melts at 183°C, but joints degrade above 100°C.
#     Ceramic Capacitors: Typically rated 125°C, safe below 85°C.
#     SSD1306 Display: Usually 70°C max before contrast issues.
#     Relay: Typically 85°C–105°C, depends on the model.
#     PCB Components: General safe limit is 80°C for longevity.

# Safe Operating Temp:
#     Recommended Max: 60°C–65°C
#     Absolute Max Before Risk: 80°C
#     Ideal for Filament Drying: 45°C–55°C (works well for PLA, PETG, and even ABS drying).

# Modes: Idle, PLA, PETG, ABS, Custom
select:
  - platform: template
    name: "Dryer Mode"
    id: dryer_mode_select
    options:
      - "Idle"
      - "PLA"
      - "PETG"
      - "ABS"
      - "Custom"
    restore_value: no
    initial_option: "Idle"
    set_action:
      - lambda: |-
          ESP_LOGI("dryer_mode_select", "Selected mode: %s", x.c_str());
          id(dryer_mode_select).publish_state(x);
          if (x == "Idle") {
            id(dryer_mode) = 0;
            id(target_temp) = 0.0;
            id(target_humidity) = 20.0;
            id(target_time) = 0;
            id(target_selector) = 0;
            id(heater_switch).turn_off();  // Turn off heater
            id(fan_switch).turn_off();     // Turn off fan
          } else if (x == "PLA") {
            id(dryer_mode) = 1;
            id(target_temp) = 45.0;
            id(target_humidity) = 20.0;
            id(target_time) = 240;
            id(target_selector) = 0;
          } else if (x == "PETG") {
            id(dryer_mode) = 2;
            id(target_temp) = 60.0;
            id(target_humidity) = 20.0;
            id(target_time) = 240;
            id(target_selector) = 0;
          } else if (x == "ABS") {
            id(dryer_mode) = 3;
            id(target_temp) = 65.0;
            id(target_humidity) = 20.0;
            id(target_time) = 240;
            id(target_selector) = 0;
          }else if (x == "Custom") {
            id(dryer_mode) = 4;
            id(target_selector) = 0;
          }else{
            id(dryer_mode) = 0;
            id(target_temp) = 0.0;
            id(target_humidity) = 20.0;
            id(target_time) = 0;
            id(target_selector) = 0;
            id(heater_switch).turn_off();  // Turn off heater
            id(fan_switch).turn_off();     // Turn off fan
          }
          id(dryer_mode_select).publish_state(x);
          id(dryer_mode_select).update();

sensor:
  - platform: aht10
    variant: AHT20
    temperature:
      id: temp_sensor
      name: "Temperature"
    humidity:
      id: humidity_sensor
      name: "Humidity"
    address: 0x38
    update_interval: 5s


display:
  - platform: ssd1306_i2c
    id: display_1306
    model: "SSD1306 128x32"
    address: 0x3C
    lambda: |-
      it.printf(0, 0, id(myfont), "%.1f °C, ~%.1f %%", id(temp_sensor).state, id(humidity_sensor).state);

      // Only show mode & time if no selection is active
      if (id(target_selector) == 0) {
        it.printf(0, 16, id(myfont), "%s, Time: %d hrs", id(dryer_mode_select).state.c_str(), id(target_time) / 60);
      }

      // Blinking effect only if selecting
      if (id(target_selector) != 0 && id(blink_state)) { 
        if (id(target_selector) == 1) {
          it.printf(0, 16, id(myfont), "Temp: %.1f °C", id(target_temp));
        } else if (id(target_selector) == 2) {
          it.printf(0, 16, id(myfont), "Time: %d hrs", id(target_time) / 60);
        } else if (id(target_selector) == 3) {
          it.printf(0, 16, id(myfont), "Humidity: %.1f %%", id(target_humidity));
        }
      }

binary_sensor:
  - platform: gpio
    pin: GPIO9
    name: "Power Button"
    on_press:
      then:
        - lambda: |-
            id(dryer_mode) = (id(dryer_mode) + 1) % 5;
            if (id(dryer_mode) == 0) {
              id(dryer_mode_select).publish_state("Idle");
            } else if (id(dryer_mode) == 1) {
              id(dryer_mode_select).publish_state("PLA");
            } else if (id(dryer_mode) == 2) {
              id(dryer_mode_select).publish_state("PETG");
            } else if (id(dryer_mode) == 3) {
              id(dryer_mode_select).publish_state("ABS");
            } else {
              id(dryer_mode_select).publish_state("Custom");
            }

    # on_hold:
    #   then:
    #     - lambda: |-
    #         id(dryer_mode_select).publish_state("Idle");

  # Set the mode to custom and toggle between temp, humidity, and time
  - platform: gpio
    pin: GPIO10
    name: "Mode Button"
    on_press:
      then:
        - lambda: |-
            id(dryer_mode_select).publish_state("Custom");
            id(target_selector) = (id(target_selector) + 1) % 3;

  - platform: gpio
    pin: GPIO20
    name: "Up Button"
    on_press:
      then:
        - lambda: |-
            id(dryer_mode_select).publish_state("Custom");
            if (id(target_selector) == 0 || id(target_selector) == 1) id(target_time) += 60;
            else if (id(target_selector) == 2) id(target_temp) += 1.0;
            else id(target_humidity) += 1.0;

            if (id(target_time) < 0) id(target_time) = 0;
            if (id(target_temp) < 0.0) id(target_temp) = 0.0;
            if (id(target_humidity) < 0.0) id(target_humidity) = 0.0;

  - platform: gpio
    pin: GPIO8
    name: "Down Button"
    on_press:
      then:
        - lambda: |-
            id(dryer_mode_select).publish_state("Custom");
            if (id(target_selector) == 0 || id(target_selector) == 1) id(target_time) -= 60;
            else if (id(target_selector) == 2) id(target_temp) -= 1.0;
            else id(target_humidity) -= 1.0;

            if (id(target_time) < 0) id(target_time) = 0;
            if (id(target_temp) < 0.0) id(target_temp) = 0.0;
            if (id(target_humidity) < 0.0) id(target_humidity) = 0.0;

switch:
  - platform: gpio
    pin:
      number: GPIO5
      mode: 
        output: true
        open_drain: false
        pullup: false
      inverted: false
    id: heater_switch
    name: "Heating Element"
    restore_mode: ALWAYS_OFF

  - platform: gpio
    pin:
      number: GPIO2
      mode: 
        output: true
        open_drain: false
        pullup: false
      inverted: false
    id: fan_switch
    name: "DC Fan"
    restore_mode: ALWAYS_OFF

font:
  - file: "gfonts://Roboto"
    id: myfont
    size: 16

# This section keeps track of the runtime of the dryer
interval:
  - interval: 60s
    then:
      - if:
          condition:
            lambda: 'return id(target_time) > 0;'
          then:
            - lambda: 'id(target_time) -= 1;'
        # If timer reaches 0, switch to maintenance mode
      - if:
          condition:
            lambda: 'return id(target_time) <= 0;'
          then:
            - switch.turn_off: heater_switch
            - switch.turn_off: fan_switch

# The way this works
# - The heating element turns on when the temp is below the target temp 
# - The heating element turns off when the temp is above the target temp by 0.5°C
# - The heating element remains off if the humidity is below the target humidity and only if the target time is 0
# - The fan turns on when the heating element is on
# - The fan turns off when the heating element is off

  - interval: 5s
    then:
      - if:
          condition:
            lambda: 'return id(target_time) > 0 || id(temp_sensor).state < id(target_temp);'
          then:
            - switch.turn_on: heater_switch
            - switch.turn_on: fan_switch
          else:
            - switch.turn_off: heater_switch
            - switch.turn_off: fan_switch

  - interval: 2s
    then:
      - component.update: display_1306

  - interval: 500ms  # Toggle every 500ms
    then:
      - lambda: |-
          id(blink_state) = !id(blink_state);
